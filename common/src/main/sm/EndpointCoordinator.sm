%{
/**
 * Copyright (c) 2011, salesforce.com, inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided
 * that the following conditions are met:
 *
 *    Redistributions of source code must retain the above copyright notice, this list of conditions and the
 *    following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
 *    the following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *    Neither the name of salesforce.com, inc. nor the names of its contributors may be used to endorse or
 *    promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @author hhildebrand
 */
%}

// The FSM of the Coordinator for Ouroboros endpoint processes

%class EndpointCoordinator
%package com.salesforce.ouroboros.endpoint
%import com.salesforce.ouroboros.Node
%import java.util.UUID
%access public

%start CoordinatorFSM::Unstable
%map CoordinatorFSM
%%
Unstable
Entry {
    cleanUp();
}
{
    stabilize
        [ctxt.isActive()]
        AwaitingFailover{}
        
    stabilize
        [!ctxt.hasActiveMembers() && ctxt.isInactiveLeader()]
        Bootstrapping/push(ControllerFSM::Bootstrap){}
        
    stabilize
        [!ctxt.hasActiveMembers()]
        Bootstrapping{}
        
    stabilize
        Stable{}
        
    destabilize
        nil{}
}

AwaitingFailover{
    failedOver
        Stable{}
}

Stable{
        
    rebalance(joiningMembers: Node[])
        [ctxt.isActiveLeader()]
        AwaitingTakeover/push(ControllerFSM::CoordinateRebalance) {
            beginRebalance(joiningMembers);
        }
        
    open(channel:UUID)
        nil {
            openChannel(channel);
        }
    
    rebalance
        Rebalance{}
}

Bootstrapping{
    bootstrapped
        Stable{}
}

Rebalance{
    rebalanced
        AwaitingTakeover{}
        
    rebalanceCancelled
        nil {
            destabilizePartition();
        }
}

AwaitingTakeover {
    commitTakeover
        Stable{}
}

Default {
    destabilize
        Unstable{}
}
%%
%map ControllerFSM
%%
Bootstrap {
    bootstrapSystem(joiningMembers: Node[])
        CoordinateBootstrap{
            setJoiningMembers(joiningMembers);
        }
}

CoordinateBootstrap
Entry{
    coordinateBootstrap();
}
{
    bootstrapped
        pop(bootstrapped){}
}

CoordinateRebalance
Entry{
    coordinateRebalance();
}
{
    rebalance
        Rebalance{}
        
}

Rebalance
Entry {
    rebalancePrepared();
}
{
    rebalanced
        nil{}
        
    memberRebalanced
        [ctxt.tallyComplete()]
        CoordinateTakeover{}
        
    memberRebalanced
        nil{}
}

CoordinateTakeover
Entry{
    coordinateTakeover();
}
{
    commitTakeover
        pop(commitTakeover) {}
}

Default{
    destabilize 
        pop(destabilize){}
}
%%